// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  PANDIT
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CARD
  UPI
  NET_BANKING
  WALLET
  CASH
  ONLINE
}

enum ServiceCategory {
  POOJA
  ASTROLOGY
  KATHA
  HAVAN
  SPECIAL_OCCASION
  CONSULTATION
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

// Core Models
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String?   @unique
  passwordHash      String
  firstName         String
  lastName          String
  dateOfBirth       DateTime?
  gender            String?
  profileImageUrl   String?
  preferredLanguage String    @default("en")
  timezone          String    @default("Asia/Kolkata")
  isActive          Boolean   @default(true)
  isVerified        Boolean   @default(false)
  emailVerifiedAt   DateTime?
  phoneVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  role              UserRole  @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  panditProfile     Pandit?
  bookings          Booking[]
  payments          Payment[]
  notifications     Notification[]
  addresses         Address[]
  reviews           Review[]
  refreshTokens     RefreshToken[]
  serviceEnrollments ServiceEnrollment[]

  @@map("users")
}

model Pandit {
  id                    String    @id @default(cuid())
  userId                String    @unique
  certificationNumber   String?   @unique
  experienceYears       Int       @default(0)
  specialization        String[]
  languagesSpoken       String[]
  serviceAreas          String[]
  hourlyRate            Decimal   @default(0)
  availabilitySchedule  Json?
  rating                Decimal   @default(0)
  totalBookings         Int       @default(0)
  isVerified            Boolean   @default(false)
  verificationDocuments Json?
  isAvailable           Boolean   @default(true)
  bio                   String?
  education             String?
  achievements          String[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings              Booking[]
  reviews               Review[]
  availability          Availability[]

  @@map("pandits")
}

model Service {
  id              String          @id @default(cuid())
  name            String
  description     String?
  category        ServiceCategory
  subcategory     String?
  durationMinutes Int
  basePrice       Decimal
  isVirtual       Boolean         @default(false)
  requiresSamagri Boolean         @default(true)
  samagriKitId    String?
  instructions    String?
  isActive        Boolean         @default(true)
  imageUrl        String?
  tags            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  bookings        Booking[]
  samagriKits     SamagriKit[]
  serviceEnrollments ServiceEnrollment[]

  @@map("services")
}

model Booking {
  id                  String        @id @default(cuid())
  userId              String
  panditId            String
  serviceId           String
  bookingDate         DateTime
  bookingTime         String
  timezone            String
  durationMinutes     Int
  totalAmount         Decimal
  status              BookingStatus @default(PENDING)
  paymentStatus       PaymentStatus @default(PENDING)
  meetingLink         String?
  meetingPassword     String?
  specialInstructions String?
  cancellationReason  String?
  cancelledAt         DateTime?
  completedAt         DateTime?
  rating              Int?
  review              String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  user                User          @relation(fields: [userId], references: [id])
  pandit              Pandit        @relation(fields: [panditId], references: [id])
  service             Service       @relation(fields: [serviceId], references: [id])
  payments            Payment[]
  notifications       Notification[]

  @@map("bookings")
}

model Payment {
  id                    String        @id @default(cuid())
  bookingId             String
  userId                String
  amount                Decimal
  currency              String        @default("INR")
  paymentMethod         PaymentMethod
  paymentGateway        String
  gatewayTransactionId  String?
  gatewayResponse       Json?
  status                PaymentStatus @default(PENDING)
  processedAt           DateTime?
  refundAmount          Decimal?      @default(0)
  refundReason          String?
  refundedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  booking               Booking       @relation(fields: [bookingId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  type        String  @default("home") // home, work, other
  line1       String
  line2       String?
  city        String
  state       String
  country     String  @default("India")
  postalCode  String
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  panditId  String
  bookingId String?  @unique
  rating    Int
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  pandit    Pandit   @relation(fields: [panditId], references: [id])

  @@map("reviews")
}

model SamagriKit {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  items       Json     // Array of items with quantities
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   String?

  @@map("samagri_kits")
}

model Availability {
  id        String   @id @default(cuid())
  panditId  String
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pandit    Pandit   @relation(fields: [panditId], references: [id], onDelete: Cascade)

  @@map("availability")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  bookingId String?
  type      NotificationType
  title     String
  message   String
  status    NotificationStatus @default(PENDING)
  sentAt    DateTime?
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user      User               @relation(fields: [userId], references: [id])
  booking   Booking?           @relation(fields: [bookingId], references: [id])

  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model ServiceEnrollment {
  id              String   @id @default(cuid())
  userId          String
  serviceId       String
  enrolledAt      DateTime @default(now())
  status          String   @default("active") // active, completed, cancelled
  preferences     Json?    // Store user preferences for the service
  progress        Json?    // Store progress tracking data
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
  @@map("service_enrollments")
}

